
unit7_lesson1_lec.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000220  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000350  08000358  00010358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000350  08000350  00010358  2**0
                  CONTENTS
  4 .ARM          00000000  08000350  08000350  00010358  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000350  08000358  00010358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000350  08000350  00010350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000354  08000354  00010354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000358  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000358  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010358  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a15  00000000  00000000  00010381  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001ab  00000000  00000000  00010d96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000000c0  00000000  00000000  00010f41  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000058  00000000  00000000  00011008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000040  00000000  00000000  00011060  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001d2b  00000000  00000000  000110a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000652  00000000  00000000  00012dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00008101  00000000  00000000  0001341d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001b51e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000009c  00000000  00000000  0001b59c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000338 	.word	0x08000338

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000338 	.word	0x08000338

08000170 <clock_init>:
#define  GPIO_PA_CRL      *(volatile uint32_t *)(GPIO_PA +0x00)
#define  GPIO_PA_ODR      *(volatile uint32_t *)(GPIO_PA +0x0C)
#define  GPIO_PA_IDR      *(volatile uint32_t *)(GPIO_PA + 0x08)


void clock_init() {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	// Enable gpioa clock
	APB2ENR |= 1<<2;
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6013      	str	r3, [r2, #0]
	// Enable gpioa clock
	APB2ENR |= 1<<3;
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6013      	str	r3, [r2, #0]

	//APB2ENR |=(1<<0);
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021018 	.word	0x40021018

08000198 <gpio_int>:
void gpio_int(){
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	//CRL for PA1 and PB1
    GPIO_PA_CRH =0x0;
 800019c:	4b1f      	ldr	r3, [pc, #124]	; (800021c <gpio_int+0x84>)
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
    GPIO_PA_ODR=0x0;
 80001a2:	4b1f      	ldr	r3, [pc, #124]	; (8000220 <gpio_int+0x88>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
	GPIO_PA_CRL=0x0;
 80001a8:	4b1e      	ldr	r3, [pc, #120]	; (8000224 <gpio_int+0x8c>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]

	GPIO_PB_CRL=0x0;
 80001ae:	4b1e      	ldr	r3, [pc, #120]	; (8000228 <gpio_int+0x90>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
	//PA1 input highZ
	GPIO_PA_CRL &=~(0b11<<4);
 80001b4:	4b1b      	ldr	r3, [pc, #108]	; (8000224 <gpio_int+0x8c>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a1a      	ldr	r2, [pc, #104]	; (8000224 <gpio_int+0x8c>)
 80001ba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80001be:	6013      	str	r3, [r2, #0]
	GPIO_PA_CRL |=(0b01<<6);
 80001c0:	4b18      	ldr	r3, [pc, #96]	; (8000224 <gpio_int+0x8c>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a17      	ldr	r2, [pc, #92]	; (8000224 <gpio_int+0x8c>)
 80001c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001ca:	6013      	str	r3, [r2, #0]
	//PB1 output push pull mode
	//CNF 00 : general purpose output push-pull
	GPIO_PB_CRL |= (0b01 << 4);
 80001cc:	4b16      	ldr	r3, [pc, #88]	; (8000228 <gpio_int+0x90>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a15      	ldr	r2, [pc, #84]	; (8000228 <gpio_int+0x90>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
	//01 : output mode max speed 10 MHZ
	GPIO_PB_CRL &=~(0b11 << 6);
 80001d8:	4b13      	ldr	r3, [pc, #76]	; (8000228 <gpio_int+0x90>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a12      	ldr	r2, [pc, #72]	; (8000228 <gpio_int+0x90>)
 80001de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80001e2:	6013      	str	r3, [r2, #0]

	//PA13 input highz
	 GPIO_PA_CRH &= ~(0b11 << 20);
 80001e4:	4b0d      	ldr	r3, [pc, #52]	; (800021c <gpio_int+0x84>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a0c      	ldr	r2, [pc, #48]	; (800021c <gpio_int+0x84>)
 80001ea:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80001ee:	6013      	str	r3, [r2, #0]
	 GPIO_PA_CRH |= (0b01 << 22 );
 80001f0:	4b0a      	ldr	r3, [pc, #40]	; (800021c <gpio_int+0x84>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a09      	ldr	r2, [pc, #36]	; (800021c <gpio_int+0x84>)
 80001f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001fa:	6013      	str	r3, [r2, #0]

	 //PB13 output push pull mode
	 GPIO_PB_CRH |= (0b01 << 20);
 80001fc:	4b0b      	ldr	r3, [pc, #44]	; (800022c <gpio_int+0x94>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a0a      	ldr	r2, [pc, #40]	; (800022c <gpio_int+0x94>)
 8000202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000206:	6013      	str	r3, [r2, #0]
	 GPIO_PB_CRH &= ~(0b11 << 22);
 8000208:	4b08      	ldr	r3, [pc, #32]	; (800022c <gpio_int+0x94>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a07      	ldr	r2, [pc, #28]	; (800022c <gpio_int+0x94>)
 800020e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000212:	6013      	str	r3, [r2, #0]
}
 8000214:	bf00      	nop
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	40010804 	.word	0x40010804
 8000220:	4001080c 	.word	0x4001080c
 8000224:	40010800 	.word	0x40010800
 8000228:	40010c00 	.word	0x40010c00
 800022c:	40010c04 	.word	0x40010c04

08000230 <main>:

int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
    /* Loop forever */
	clock_init();
 8000236:	f7ff ff9b 	bl	8000170 <clock_init>
	gpio_int();
 800023a:	f7ff ffad 	bl	8000198 <gpio_int>
	//PA1 >> connected external
	while(1){
	if (((GPIO_PA_IDR & (1<<1)) >> 1) ==0 )
 800023e:	4b15      	ldr	r3, [pc, #84]	; (8000294 <main+0x64>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f003 0302 	and.w	r3, r3, #2
 8000246:	2b00      	cmp	r3, #0
 8000248:	d10c      	bne.n	8000264 <main+0x34>
			{
		      GPIO_PB_ODR ^= 1<<1;
 800024a:	4b13      	ldr	r3, [pc, #76]	; (8000298 <main+0x68>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a12      	ldr	r2, [pc, #72]	; (8000298 <main+0x68>)
 8000250:	f083 0302 	eor.w	r3, r3, #2
 8000254:	6013      	str	r3, [r2, #0]
				while((GPIO_PA_IDR & (1<<1)) >> 1 ==0 );
 8000256:	bf00      	nop
 8000258:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <main+0x64>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f003 0302 	and.w	r3, r3, #2
 8000260:	2b00      	cmp	r3, #0
 8000262:	d0f9      	beq.n	8000258 <main+0x28>
			}
	//PA13 >> connected
	if (((GPIO_PA_IDR & (1<<13)) >> 13 )==1 )
 8000264:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <main+0x64>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	0b5b      	lsrs	r3, r3, #13
 800026a:	f003 0301 	and.w	r3, r3, #1
 800026e:	2b01      	cmp	r3, #1
 8000270:	d105      	bne.n	800027e <main+0x4e>
				{
			      GPIO_PB_ODR ^= 1<<13;
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <main+0x68>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a08      	ldr	r2, [pc, #32]	; (8000298 <main+0x68>)
 8000278:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800027c:	6013      	str	r3, [r2, #0]

				}
	//delay
	for (int i =0; i<=500; i++);
 800027e:	2300      	movs	r3, #0
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	e002      	b.n	800028a <main+0x5a>
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	3301      	adds	r3, #1
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000290:	ddf8      	ble.n	8000284 <main+0x54>
	if (((GPIO_PA_IDR & (1<<1)) >> 1) ==0 )
 8000292:	e7d4      	b.n	800023e <main+0xe>
 8000294:	40010808 	.word	0x40010808
 8000298:	40010c0c 	.word	0x40010c0c

0800029c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800029c:	480d      	ldr	r0, [pc, #52]	; (80002d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800029e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a4:	480c      	ldr	r0, [pc, #48]	; (80002d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002a6:	490d      	ldr	r1, [pc, #52]	; (80002dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a8:	4a0d      	ldr	r2, [pc, #52]	; (80002e0 <LoopForever+0xe>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ac:	e002      	b.n	80002b4 <LoopCopyDataInit>

080002ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b2:	3304      	adds	r3, #4

080002b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b8:	d3f9      	bcc.n	80002ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ba:	4a0a      	ldr	r2, [pc, #40]	; (80002e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002bc:	4c0a      	ldr	r4, [pc, #40]	; (80002e8 <LoopForever+0x16>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c0:	e001      	b.n	80002c6 <LoopFillZerobss>

080002c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c4:	3204      	adds	r2, #4

080002c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c8:	d3fb      	bcc.n	80002c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ca:	f000 f811 	bl	80002f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ce:	f7ff ffaf 	bl	8000230 <main>

080002d2 <LoopForever>:

LoopForever:
    b LoopForever
 80002d2:	e7fe      	b.n	80002d2 <LoopForever>
  ldr   r0, =_estack
 80002d4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002dc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e0:	08000358 	.word	0x08000358
  ldr r2, =_sbss
 80002e4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e8:	2000001c 	.word	0x2000001c

080002ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002ec:	e7fe      	b.n	80002ec <ADC1_2_IRQHandler>
	...

080002f0 <__libc_init_array>:
 80002f0:	b570      	push	{r4, r5, r6, lr}
 80002f2:	2500      	movs	r5, #0
 80002f4:	4e0c      	ldr	r6, [pc, #48]	; (8000328 <__libc_init_array+0x38>)
 80002f6:	4c0d      	ldr	r4, [pc, #52]	; (800032c <__libc_init_array+0x3c>)
 80002f8:	1ba4      	subs	r4, r4, r6
 80002fa:	10a4      	asrs	r4, r4, #2
 80002fc:	42a5      	cmp	r5, r4
 80002fe:	d109      	bne.n	8000314 <__libc_init_array+0x24>
 8000300:	f000 f81a 	bl	8000338 <_init>
 8000304:	2500      	movs	r5, #0
 8000306:	4e0a      	ldr	r6, [pc, #40]	; (8000330 <__libc_init_array+0x40>)
 8000308:	4c0a      	ldr	r4, [pc, #40]	; (8000334 <__libc_init_array+0x44>)
 800030a:	1ba4      	subs	r4, r4, r6
 800030c:	10a4      	asrs	r4, r4, #2
 800030e:	42a5      	cmp	r5, r4
 8000310:	d105      	bne.n	800031e <__libc_init_array+0x2e>
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000318:	4798      	blx	r3
 800031a:	3501      	adds	r5, #1
 800031c:	e7ee      	b.n	80002fc <__libc_init_array+0xc>
 800031e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000322:	4798      	blx	r3
 8000324:	3501      	adds	r5, #1
 8000326:	e7f2      	b.n	800030e <__libc_init_array+0x1e>
 8000328:	08000350 	.word	0x08000350
 800032c:	08000350 	.word	0x08000350
 8000330:	08000350 	.word	0x08000350
 8000334:	08000354 	.word	0x08000354

08000338 <_init>:
 8000338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033a:	bf00      	nop
 800033c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033e:	bc08      	pop	{r3}
 8000340:	469e      	mov	lr, r3
 8000342:	4770      	bx	lr

08000344 <_fini>:
 8000344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000346:	bf00      	nop
 8000348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034a:	bc08      	pop	{r3}
 800034c:	469e      	mov	lr, r3
 800034e:	4770      	bx	lr
